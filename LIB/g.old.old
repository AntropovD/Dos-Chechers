;==============================================================
Init_Graphic proc 
	mov ax, 12h
	int 10h
	mov ah, 0Fh
	int 10h
	mov old_videomode, al
	ret
Init_Graphic endp
;==============================================================
Change_Colour proc 
	push ax dx
	xor ax, 0fh
	shl ax, 8
	inc ax
	mov dx, 3ceh ; регистр разрешени¤ установки сброса
	out dx, ax
	pop dx ax
	ret
Change_Colour endp
;==============================================================
Print_Pixel proc
	push ax cx dx
	mov ax, 0a000h
	mov es, ax

	shl dx, 6
	mov bx, dx
	shr dx, 2
	add bx, dx ; 80*dx
	mov dx, cx
	shr dx, 3 ; cx/8
	add bx, dx
	; в bx смещений до нужного байта

	; установка бита нужного пиксел¤
	and cl, 7
	mov ch, 7
	sub ch, cl
	xchg cl, ch
	mov ch, 1
	rol ch, cl
	; в ch маска с единицей на позиции измен¤емого пиксел¤

	mov ax, 8
	mov ah, ch
	mov dx, 3ceh ; регистр битовой маски
	out dx, ax

	mov dh, 0ffh
	xchg dh, byte ptr es:[bx]

	pop dx cx ax
	ret
Print_Pixel endp
;==============================================================
Draw_Chessboard proc
	mov cx, 0
	mov dx, 0
	mov index, 0
	mov si, offset BOARD

	draw_chessboard_loop:
		mov al, byte ptr index
		
		and al, 0001b
		cmp al, 1
		je black_cell
			call Draw_WhiteBox
			jmp $+5
		black_cell:
			call Draw_BlackBox

		add cx,48
		cmp cx, 384
		jne not_new_line
		sub cx, 384
		add dx, 48
		not_new_line:
		inc index 
		cmp index, 64
		jne draw_chessboard_loop

	ret
Draw_Chessboard endp
;==============================================================
	Draw_WhiteBox proc 
		mov al, CHESSBOARD_WHITE
		call Change_Colour
		call Draw_Box
		ret
	Draw_WhiteBox endp
	;==============================================================
	Draw_BlackBox proc 
		mov al, CHESSBOARD_BLACK	
		call Change_Colour
		call Draw_Box
		ret
	Draw_BlackBox endp	
	;==============================================================
	Draw_Box proc 
		push X
		push Y
		mov X, 0
		mov Y, 0
		draw_box_loop:
			call Print_Pixel
			inc cx
			inc Y
			cmp Y, 48
			je draw_box_new_line
			jmp draw_box_loop
		draw_box_new_line:
			mov Y, 0
			sub cx, 48
			inc dx
			inc X
			cmp X, 48
			je draw_box_exit
			jmp draw_box_loop

		draw_box_exit:
			sub dx, 48
			pop Y 
			pop X
			ret
	Draw_Box endp
;==============================================================
Variables:
	index db ?
	old_videomode db ?
	X dw ?
	Y dw ?

;==============================================================
Constants:
	CHESSBOARD_BLACK equ 6
	CHESSBOARD_WHITE equ 14
	PAWN_WHITE equ 7
	PAWN_BLACK equ 0	